= arabic notes
https://docs.google.com/document/d/19coA_XEVjTViCKjkbVqaUFhiWrC1vbIaBxcQ7N5AOMA/edit?usp=sharing
###
Over the past few decades computing systems have only grown in complexity. Rea‐
soning about how software behaves has created multiple business categories, all
of them trying solve the challenges of gaining insight into complex systems. One
approach to get this visibility is to analyze the logs of data generated by all
applica‐ tions running in a computing system. Logs are a great source of
information. They can give you precise data about how an application is
behaving. However, they con‐ strain you because you get only the information
that the engineers who built the application exposed in those logs.
= ISBN: 9781492050209

#
BPF is a highly flexible and efficient virtual machine-like construct in the
Linux kernel allowing to execute bytecode at various hook points in a safe
manner.

#
tc (traffic control)
XDP (eXpress Data Path)

=Advices
Use any user level solutions built on top of BPF like cilium, etc..  this is
super useful and will help to understand Linux kernel it self!
###
Many of the programs that you can write will help you better understand what’s
happening in your system. They give you direct information about the behavior of
your system and the hardware it’s running on. They can access memory regions
related to specific programs, and extract execution traces from run‐ ning
processes. They also give you direct access to the resources allocated for each
specific process, from file descriptors to CPU and memory usage.
###
BPF maps are key/value stores that reside in the kernel. They can be accessed by
any BPF program that knows about them. Programs that run in user-space can also
access these maps by using file descriptors. You can store any kind of data in a
map, as long as you specify the data size correctly beforehand. The kernel
treats keys and values as binary blobs, and it doesn’t care about what you keep
in a map.
###
{loop}
The final operation we look at in this section can help you to find arbitrary
elements in a BPF program. There will be occasions when you don’t know exactly
the key for the element you’re looking for or you just want to see what’s inside
a map. BPF pro‐ vides an instruction for this called bpf_map_get_next_key.
Unlike the helpers you’ve seen up to now, this instruction is available only for
programs running on user-space.
If you want to print all of the values in the map, you can use
bpf_map_get_next_key with a lookup key that doesn’t exist in the map. This
forces BPF to start from the beginning of the map
###
= tracepoints
sudo tree /sys/kernel/debug/tracing/events/
###
* BPFTool
* BPFTrace
* kubectl-trace
* eBPF Exporter
* DSL (Domain-specific language)
* linux/tools/bpf/bpf_dbg.c
###
man 2 bpf
###
= Seccomp filters ?
###
= The history
https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md
###
linux/include/uapi/linux/bpf.h  -- .bpf.c & kernel side only
linux/tools/lib/bpf/bpf.h	-- .c & userside




